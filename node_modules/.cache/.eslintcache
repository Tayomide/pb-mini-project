[{"C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\index.js":"1","C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\reportWebVitals.js":"2","C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\App.js":"3","C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\components\\Compare.js":"4","C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\components\\Box.js":"5"},{"size":535,"mtime":1654109213056,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1654109213058,"results":"8","hashOfConfig":"7"},{"size":1748,"mtime":1654559338292,"results":"9","hashOfConfig":"7"},{"size":4801,"mtime":1654312885983,"results":"10","hashOfConfig":"7"},{"size":2440,"mtime":1654328268926,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"3bhz10",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\index.js",[],[],[],"C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\reportWebVitals.js",[],[],"C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\App.js",[],[],"C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\components\\Compare.js",["29"],[],"import React, { useState, useEffect } from 'react'\nimport Box from './Box.js'\nimport './Compare.css'\n\nconst Compare = ({ selected, setSelected, setComparing }) => {\n  const [selObj, setSelObj] = useState({})\n  const [closeCompare, setCloseCompare] = useState(false)\n\n  var mouseDownPos = null\n  var initTop = null\n  var initTop2 = null\n  var initLeft2 = null\n  const handleMouseDown = (event) => {\n    if (event.target.classList.contains(\"checked-box\")) {\n      mouseDownPos = event.target.parentElement.children[0]\n      mouseDownPos.style.position = \"fixed\"\n      mouseDownPos.style.zIndex = 2\n      initTop2 = mouseDownPos.getBoundingClientRect().top\n      initLeft2 = mouseDownPos.getBoundingClientRect().left\n      initTop = mouseDownPos.parentElement.getBoundingClientRect().y\n        + mouseDownPos.parentElement.getBoundingClientRect().height\n        - mouseDownPos.getBoundingClientRect().height\n      mouseDownPos.style.top = event.clientY - mouseDownPos.getBoundingClientRect().height/2 + \"px\";\n      mouseDownPos.style.left = event.clientX - mouseDownPos.getBoundingClientRect().width/2 + \"px\";\n    }\n    window.addEventListener(\"mousemove\", handleDrag)\n  }\n  const handleDrag = (event) => {\n    if (mouseDownPos) {\n      mouseDownPos.style.top = event.clientY - mouseDownPos.getBoundingClientRect().height/2 + \"px\"\n      mouseDownPos.style.left = event.clientX - mouseDownPos.getBoundingClientRect().width/2 + \"px\";\n    }\n  }\n  const handleMouseUp = (event) => {\n    window.removeEventListener(\"mousemove\", handleDrag)\n    if (event.target.classList.contains(\"checked-box\") && mouseDownPos) {\n      var newGCS = event.target.parentElement.style.gridColumn.split(' / ')[0]\n      var initGCS = mouseDownPos.parentElement.style.gridColumn.split(' / ')[0]\n\n      var initLeft = mouseDownPos.parentElement.getBoundingClientRect().x\n\n      mouseDownPos.style.transition = \"0.2s ease-in-out\"\n      mouseDownPos.style.left = event.target.parentElement.getBoundingClientRect().x + \"px\"\n      mouseDownPos.style.top = initTop + \"px\"\n\n      event.target.parentElement.children[0].style.transition = \"0.2s ease-in-out\"\n      event.target.parentElement.children[0].style.position = \"fixed\"\n      event.target.parentElement.children[0].style.left = initLeft + \"px\"\n      setTimeout(() => {\n        event.target.parentElement.children[0].style.transition = \"none\"\n        mouseDownPos.style.transition = \"none\"\n        setSelObj({...selObj, \n          [event.target.parentElement.dataset.index]: {...selObj[event.target.parentElement.dataset.index], \n            position: parseInt(initGCS)-1}, \n            [mouseDownPos.parentElement.dataset.index]: {...selObj[mouseDownPos.parentElement.dataset.index], \n              position: parseInt(newGCS)-1}})        \n      }, 200)\n            \n      mouseDownPos.style.zIndex = 1\n    }\n    else if (mouseDownPos) {\n      // mouseDownPos.style.position = \"absolute\";\n      mouseDownPos.style.top = initTop2 + \"px\"\n      mouseDownPos.style.left = initLeft2 + \"px\";\n      mouseDownPos.style.zIndex = 1;\n    }\n  }\n  useEffect(()=> {\n    let obj = {}\n    let sortable = [];\n    console.log(Math.max(...Object.values(selected)))\n    for (var item in selected) {\n        sortable.push([item, selected[item]]);\n    }\n\n    sortable.sort(function(a, b) {\n        return parseInt(a[1]) - parseInt(b[1]);\n    });\n    console.log(\"sortable\",sortable)\n    // let objSorted = {}\n    // let index = 1\n    // sortable.forEach(function(item){\n    //     objSorted[index]=item[1]\n    //     index += 1 \n    // })\n    // console.log(\"objSorted\",objSorted)\n    // setSelected(objSorted)\n    for (var i=0; i < sortable.length; i++) {\n      console.log(sortable[i][1])\n      obj[i + 1] = {\"position\": i, \"data\": sortable[i][1]}\n    }\n    setSelObj((prevSelObj) => {return obj})\n    console.log(\"selObj\" , selObj)\n    console.log(\"selObj\",selObj, obj, sortable)\n  }, [])\n  \n  \n  \n  return (\n    <section className={`overlay ${closeCompare ? 'close' : '' }`} onMouseUp={handleMouseUp} onMouseLeave={handleMouseUp}>\n        <section className='compare-window' dragger=\"dragger\" \n        style={{\"--selected-length\": `${Object.keys(selected).length}`,\n        \"--max-height\": `calc(100vh - 80px)`\n      }}\n        onMouseDown={handleMouseDown}>\n            {Object.keys(selObj).map((i) => {\n                return <Box key={i} index={i} position={selObj[i][\"position\"]} data={selObj[i][\"data\"]} selected={selected} \n                showCheckBox={false} maxHeight={`${Math.max(...Object.values(selected)) + 4}px`}/>\n            })}\n            <button className=\"close-compare\" onClick={() => {\n              setCloseCompare(true);\n              setTimeout(()=>{setComparing(false)}, 400)\n              }}><p>+</p></button>\n        </section>\n    </section>\n  )\n}\n\nexport default Compare","C:\\Users\\Tomiwa\\Projects\\pb-mini-project\\src\\components\\Box.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":95,"column":6,"nodeType":"32","endLine":95,"endColumn":8,"suggestions":"33"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selObj' and 'selected'. Either include them or remove the dependency array.","ArrayExpression",["34"],{"desc":"35","fix":"36"},"Update the dependencies array to be: [selObj, selected]",{"range":"37","text":"38"},[3885,3887],"[selObj, selected]"]